// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/graphql"
}

enum CollectionStatus {
  ACCEPTED
  CANCELED
  COMPLETED
  NOT_STARTED
  OPENED
  PAUSED
}

enum MaterialType {
  GLASS
  HAZARDOUS_MATERIALS
  HOSPITAL_WASTE
  METALS
  NON_RECYCLABLE
  ORGANIC_WASTE
  PAPERS
  PLASTICS
  RADIOACTIVE_MATERIALS
  WOODS
}

enum WeekDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Address {
  id             String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  cep            String
  city           String
  complement     String
  country        String
  createdAt      DateTime     @default(now())
  number         String
  state          String
  street         String
  updatedAt      DateTime     @updatedAt
  userLocation   UserLocation @relation(fields: [userLocationId], references: [id])
  userLocationId String       @unique
}

model CollectionPath {
  id                              String            @id @default(dbgenerated()) @map("_id") @db.ObjectId
  collectionPoints                CollectionPoint[]
  collectionPathResponsibleUser   OrganizationUser  @relation(fields: [collectionPathResponsibleUserId], references: [id])
  collectionPathResponsibleUserId String
  collectionPathStatus            CollectionStatus
  createdAt                       DateTime          @default(now())
  description                     String
  estimatedTime                   Int
  name                            String
  totalEstimatedDistance          Float
  updatedAt                       DateTime          @updatedAt
}

model CollectionPoint {
  id                  String            @id @default(dbgenerated()) @map("_id") @db.ObjectId
  collectionPath      CollectionPath    @relation(fields: [collectionPathId], references: [id])
  collectionPathId    String
  collectionRequest   CollectionRequest @relation(fields: [collectionRequestId], references: [id])
  collectionRequestId String            @unique
  createdAt           DateTime          @default(now())
  destination         CollectionPoint?  @relation("startOrEndCollectionPoint", fields: [destinationId], references: [id])
  destinationId       String?           @unique
  origin              CollectionPoint?  @relation("startOrEndCollectionPoint")
  updatedAt           DateTime          @updatedAt

  @@unique([collectionRequestId, destinationId])
}

model CollectionRequest {
  id                                      String                      @id @default(dbgenerated()) @map("_id") @db.ObjectId
  acceptedByOrganizationUser              OrganizationUser?           @relation(fields: [acceptedByOrganizationUserId], references: [id])
  acceptedByOrganizationUserId            String?
  canceledOrCompletedByUser               User?                       @relation("canceledOrCompletedByUser", fields: [canceledOrCompletedByUserId], references: [id])
  canceledOrCompletedByUserId             String?
  canceledOrCompletedByOrganizationUser   OrganizationUser?           @relation("canceledOrCompletedByOrganizationUser", fields: [canceledOrCompletedByOrganizationUserId], references: [id])
  canceledOrCompletedByOrganizationUserId String?
  createdByUser                           User                        @relation(fields: [createdByUserId], references: [id])
  createdByUserId                         String
  createdAt                               DateTime                    @default(now())
  collectionPoint                         CollectionPoint?
  collectionRequestMaterials              CollectionRequestMaterial[]
  collectionStatus                        CollectionStatus
  details                                 String
  location                                UserLocation                @relation(fields: [locationId], references: [id])
  locationId                              String
  organization                            Organization                @relation(fields: [organizationId], references: [id])
  organizationId                          String
  updatedAt                               DateTime                    @updatedAt
}

model CollectionRequestMaterial {
  id                  String            @id @default(dbgenerated()) @map("_id") @db.ObjectId
  amount              Float
  collectionRequest   CollectionRequest @relation(fields: [collectionRequestId], references: [id])
  collectionRequestId String
  createdAt           DateTime          @default(now())
  description         String
  materialType        MaterialType
  updatedAt           DateTime          @updatedAt

  @@unique([collectionRequestId, materialType])
}

model OrganizationUser {
  id                            String              @id @default(dbgenerated()) @map("_id") @db.ObjectId
  collectionRequests            CollectionRequest[]
  createdAt                     DateTime            @default(now())
  email                         String
  isActive                      Boolean
  name                          String
  organization                  Organization        @relation(fields: [organizationId], references: [id])
  organizationId                String
  password                      String
  responsibleForCollectionPaths CollectionPath[]
  updatedAt                     DateTime            @updatedAt
  CollectionRequest             CollectionRequest[] @relation("canceledOrCompletedByOrganizationUser")

  @@unique([email, organizationId, password])
}

model Organization {
  id                String              @id @default(dbgenerated()) @map("_id") @db.ObjectId
  cpfCnpj           String
  createdAt         DateTime            @default(now())
  email             String              @unique
  isActive          Boolean
  name              String
  organizationType  String
  password          String
  users             OrganizationUser[]
  updatedAt         DateTime            @updatedAt
  CollectionRequest CollectionRequest[]
}

model User {
  id                 String              @id @default(dbgenerated()) @map("_id") @db.ObjectId
  collectionRequests CollectionRequest[]
  createdAt          DateTime            @default(now())
  email              String              @unique
  isActive           Boolean
  locations          UserLocation[]
  name               String
  password           String
  updatedAt          DateTime            @updatedAt
  CollectionRequest  CollectionRequest[] @relation("canceledOrCompletedByUser")
}

model UserLocation {
  id                String              @id @default(dbgenerated()) @map("_id") @db.ObjectId
  address           Address?
  createdAt         DateTime            @default(now())
  latitude          Float
  longitude         Float
  placename         String
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  CollectionRequest CollectionRequest[]

  @@unique([placename, userId])
}
